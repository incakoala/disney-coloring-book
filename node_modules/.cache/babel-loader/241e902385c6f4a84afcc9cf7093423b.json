{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Hilary/Documents/CodeProjects/project-disney_villains/src/components/modal.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// class App extends React.PureComponent {\n//     state = {\n//       modal: false,\n//       modalInfo: \"\",\n//     }\n//     selectModal = (info = \"\") => {\n//       this.setState({\n//         modal: !this.state.modal,\n//         modalInfo: info\n//       })\n//     }\n//     render() {\n//       return (\n//         <div className=\"App\">\n//             <p onClick={ () => this.selectModal('Modal A') }>\n//               sign in\n//             </p>\n//             <p onClick={ () => this.selectModal('Modal B') }>\n//              register\n//             </p>\n//             <Modal \n//               displayModal={this.state.modal}\n//               modalInfo={this.state.modalInfo}\n//               closeModal={this.selectModal}\n//             />\n//         </div>\n//       );\n//     }\n//   }\n//   const Modal = props => {\n//     function displayInfo () {\n//       switch(props.modalInfo) {\n//         case 'Modal A':\n//           return <div className=\"modal-info\">username \n//           password</div>\n//         case 'Modal B':\n//           return <div className=\"modal-info\">you rock</div>\n//         default:\n//           return null\n//       }\n//     }\n//     function closeModal(e) {\n//       e.stopPropagation()\n//       props.closeModal()\n//     }\n//     const divStyle = {\n//       display: props.displayModal ? 'block' : 'none',\n//     };\n//       return (\n//         <div \n//           className=\"modal\"\n//           onClick={ closeModal }\n//           style={divStyle}>\n//           <div className=\"modal-content\"\n//             onClick={ e => e.stopPropagation() }>\n//             <span \n//               className=\"close\"\n//               onClick={ closeModal }>&times;\n//             </span>\n//             <div className=\"modal-flex\">\n//               {displayInfo()}\n//             </div>\n//           </div>\n//         </div>\n//       );\n//   }\n//   ReactDOM.render(\n//     <App />,\n//     document.getElementById('container')\n//   );\n//second example\n// import React, { useState } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import { ModalProvider, Modal } from \"./Modal\";\n// import \"./styles.css\";\n// function App() {\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   return (\n//     <ModalProvider>\n//       <form\n//         onSubmit={event => {\n//           event.preventDefault();\n//           console.log(\"parent form submit\");\n//         }}\n//       >\n//         <h1>My App</h1>\n//         <button type=\"button\" onClick={() => setIsModalOpen(true)}>\n//           Login\n//         </button>\n//         <Page />\n//         {isModalOpen && (\n//           <Modal onClose={() => setIsModalOpen(false)}>\n//             <form\n//               onSubmit={event => {\n//                 event.preventDefault();\n//                 console.log(\"modal submit\");\n//               }}\n//             >\n//               <p>will be login in criteria</p>\n//               <button type=\"submit\">Go</button>\n//             </form>\n//           </Modal>\n//         )}\n//       </form>\n//     </ModalProvider>\n//   );\n// }\n// function Page() {\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   return (\n//     <div>\n//       <button onClick={() => setIsModalOpen(true)}>Register</button>\n//       {isModalOpen && (\n//         <Modal\n//           onClose={() => setIsModalOpen(false)}\n//           style={{ width: 400, textAlign: \"center\" }}\n//         >\n//           <p>will have register info stuff </p>\n//         </Modal>\n//       )}\n//     </div>\n//   );\n// }\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<App />, rootElement);\nimport React, { useRef, useContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled, { keyframes } from \"styled-components\";\nimport './login.css';\nconst Context = /*#__PURE__*/React.createContext();\nexport function ModalProvider({\n  children\n}) {\n  _s();\n\n  const modalRef = useRef();\n  const [context, setContext] = useState(); // make sure re-render is triggered after initial\n  // render so that modalRef exists\n\n  useEffect(() => {\n    setContext(modalRef.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: context,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: modalRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModalProvider, \"qZSh+SNk9h2d75XbG6wTEDDbwOA=\");\n\n_c = ModalProvider;\nexport function Modal({\n  onClose,\n  children,\n  ...props\n}) {\n  _s2();\n\n  const modalNode = useContext(Context);\n  return modalNode ? /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Overlay, {\n    children: /*#__PURE__*/_jsxDEV(Dialog, { ...props,\n      children: [children, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this), modalNode) : null;\n}\n\n_s2(Modal, \"rEs01pJvqyy8urmzZRee6stWd98=\");\n\n_c2 = Modal;\nconst fadeIn = keyframes`from { opacity: 0; }`;\nconst Container = styled.div`\n  position: relative;\n  z-index: 0;\n`;\n_c3 = Container;\nconst Overlay = styled.div`\n  animation: ${fadeIn} 200ms ease-out;\n  position: absolute;\n  top: -450px;\n  left: 0;\n  border: 5px solid green;\n  width: 70vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, .7);\n`;\n_c4 = Overlay;\nconst Dialog = styled.div`\n  background: white;\n  border-radius: 5px;\n  padding: 100px;\n\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n`;\n_c5 = Dialog;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ModalProvider\");\n$RefreshReg$(_c2, \"Modal\");\n$RefreshReg$(_c3, \"Container\");\n$RefreshReg$(_c4, \"Overlay\");\n$RefreshReg$(_c5, \"Dialog\");","map":{"version":3,"sources":["/Users/Hilary/Documents/CodeProjects/project-disney_villains/src/components/modal.js"],"names":["React","useRef","useContext","useState","useEffect","ReactDOM","styled","keyframes","Context","createContext","ModalProvider","children","modalRef","context","setContext","current","Modal","onClose","props","modalNode","createPortal","fadeIn","Container","div","Overlay","Dialog"],"mappings":";;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,UAAxB,EAAoCC,QAApC,EAA8CC,SAA9C,QAA+D,OAA/D;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,mBAAlC;AACA,OAAO,aAAP;AAEA,MAAMC,OAAO,gBAAGR,KAAK,CAACS,aAAN,EAAhB;AAEA,OAAO,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAqC;AAAA;;AAC1C,QAAMC,QAAQ,GAAGX,MAAM,EAAvB;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,EAAtC,CAF0C,CAI1C;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,UAAU,CAACF,QAAQ,CAACG,OAAV,CAAV;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAEF,OAAzB;AAAA,gBAAmCF;AAAnC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,GAAG,EAAEC;AAAV;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAhBeF,a;;KAAAA,a;AAkBhB,OAAO,SAASM,KAAT,CAAe;AAAEC,EAAAA,OAAF;AAAWN,EAAAA,QAAX;AAAqB,KAAGO;AAAxB,CAAf,EAAgD;AAAA;;AACrD,QAAMC,SAAS,GAAGjB,UAAU,CAACM,OAAD,CAA5B;AAEA,SAAOW,SAAS,gBACZd,QAAQ,CAACe,YAAT,eACE,QAAC,OAAD;AAAA,2BACE,QAAC,MAAD,OAAYF,KAAZ;AAAA,iBACGP,QADH,eAEE;AAAQ,QAAA,OAAO,EAAEM,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,EAOEE,SAPF,CADY,GAUZ,IAVJ;AAWD;;IAdeH,K;;MAAAA,K;AAgBhB,MAAMK,MAAM,GAAGd,SAAU,sBAAzB;AAEA,MAAMe,SAAS,GAAGhB,MAAM,CAACiB,GAAI;AAC7B;AACA;AACA,CAHA;MAAMD,S;AAKN,MAAME,OAAO,GAAGlB,MAAM,CAACiB,GAAI;AAC3B,eAAeF,MAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;MAAMG,O;AAWN,MAAMC,MAAM,GAAGnB,MAAM,CAACiB,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;MAAME,M","sourcesContent":["// class App extends React.PureComponent {\n\n//     state = {\n//       modal: false,\n//       modalInfo: \"\",\n//     }\n  \n//     selectModal = (info = \"\") => {\n//       this.setState({\n//         modal: !this.state.modal,\n//         modalInfo: info\n//       })\n//     }\n  \n//     render() {\n//       return (\n//         <div className=\"App\">\n//             <p onClick={ () => this.selectModal('Modal A') }>\n//               sign in\n//             </p>\n//             <p onClick={ () => this.selectModal('Modal B') }>\n//              register\n//             </p>\n//             <Modal \n//               displayModal={this.state.modal}\n//               modalInfo={this.state.modalInfo}\n//               closeModal={this.selectModal}\n//             />\n//         </div>\n//       );\n//     }\n//   }\n  \n//   const Modal = props => {\n    \n//     function displayInfo () {\n//       switch(props.modalInfo) {\n//         case 'Modal A':\n//           return <div className=\"modal-info\">username \n//           password</div>\n//         case 'Modal B':\n//           return <div className=\"modal-info\">you rock</div>\n//         default:\n//           return null\n//       }\n//     }\n  \n//     function closeModal(e) {\n//       e.stopPropagation()\n//       props.closeModal()\n//     }\n    \n//     const divStyle = {\n//       display: props.displayModal ? 'block' : 'none',\n//     };\n  \n//       return (\n//         <div \n//           className=\"modal\"\n//           onClick={ closeModal }\n//           style={divStyle}>\n  \n//           <div className=\"modal-content\"\n//             onClick={ e => e.stopPropagation() }>\n            \n//             <span \n//               className=\"close\"\n//               onClick={ closeModal }>&times;\n//             </span>\n  \n//             <div className=\"modal-flex\">\n//               {displayInfo()}\n//             </div>\n  \n//           </div>\n  \n//         </div>\n//       );\n//   }\n  \n//   ReactDOM.render(\n//     <App />,\n//     document.getElementById('container')\n//   );\n  \n\n\n\n//second example\n// import React, { useState } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import { ModalProvider, Modal } from \"./Modal\";\n\n// import \"./styles.css\";\n\n// function App() {\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   return (\n//     <ModalProvider>\n//       <form\n//         onSubmit={event => {\n//           event.preventDefault();\n//           console.log(\"parent form submit\");\n//         }}\n//       >\n//         <h1>My App</h1>\n//         <button type=\"button\" onClick={() => setIsModalOpen(true)}>\n//           Login\n//         </button>\n//         <Page />\n//         {isModalOpen && (\n//           <Modal onClose={() => setIsModalOpen(false)}>\n//             <form\n//               onSubmit={event => {\n//                 event.preventDefault();\n//                 console.log(\"modal submit\");\n//               }}\n//             >\n//               <p>will be login in criteria</p>\n//               <button type=\"submit\">Go</button>\n//             </form>\n//           </Modal>\n//         )}\n//       </form>\n//     </ModalProvider>\n//   );\n// }\n\n// function Page() {\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   return (\n//     <div>\n//       <button onClick={() => setIsModalOpen(true)}>Register</button>\n//       {isModalOpen && (\n//         <Modal\n//           onClose={() => setIsModalOpen(false)}\n//           style={{ width: 400, textAlign: \"center\" }}\n//         >\n//           <p>will have register info stuff </p>\n//         </Modal>\n//       )}\n//     </div>\n//   );\n// }\n\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<App />, rootElement);\nimport React, { useRef, useContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled, { keyframes } from \"styled-components\";\nimport './login.css';\n\nconst Context = React.createContext();\n\nexport function ModalProvider({ children }) {\n  const modalRef = useRef();\n  const [context, setContext] = useState();\n\n  // make sure re-render is triggered after initial\n  // render so that modalRef exists\n  useEffect(() => {\n    setContext(modalRef.current);\n  }, []);\n\n  return (\n    <Container>\n      <Context.Provider value={context}>{children}</Context.Provider>\n      <div ref={modalRef} />\n    </Container>\n  );\n}\n\nexport function Modal({ onClose, children, ...props }) {\n  const modalNode = useContext(Context);\n\n  return modalNode\n    ? ReactDOM.createPortal(\n        <Overlay>\n          <Dialog {...props}>\n            {children}\n            <button onClick={onClose}>Close</button>\n          </Dialog>\n        </Overlay>,\n        modalNode\n      )\n    : null;\n}\n\nconst fadeIn = keyframes`from { opacity: 0; }`;\n\nconst Container = styled.div`\n  position: relative;\n  z-index: 0;\n`;\n\nconst Overlay = styled.div`\n  animation: ${fadeIn} 200ms ease-out;\n  position: absolute;\n  top: -450px;\n  left: 0;\n  border: 5px solid green;\n  width: 70vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, .7);\n`;\n\nconst Dialog = styled.div`\n  background: white;\n  border-radius: 5px;\n  padding: 100px;\n\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n`;\n"]},"metadata":{},"sourceType":"module"}