{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Hilary/Documents/CodeProjects/project-disney_villains/src/components/ImageGallery.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useRef } from \"react\";\nimport UserContext from \"../context/UserContext\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from 'axios'; // Sources:\n// https://uxdesign.cc/5-steps-to-create-a-simple-digital-coloring-book-in-react-3d4f5b2af822\n// MERN Stack Tutorial with Auth (8 part series):\n// https://www.youtube.com/watch?v=4_ZiJGY5F38\n\nexport default function ImageGallery() {\n  _s();\n\n  const [allImages, addImage] = useState([{}]);\n  const {\n    userData\n  } = useContext(UserContext);\n  const history = useHistory();\n  useEffect(() => {\n    // Uses get route to fetch all images frorm the database\n    const fetchItems = async () => {\n      const response = await axios.get(\"http://localhost:5000/image/all\");\n      addImage(response.data);\n      console.log(allImages);\n    };\n\n    fetchItems();\n  });\n\n  const colorImage = async image => {\n    // if user is not logged in the user is taken to the sign in page\n    if (!userData.token) {\n      history.push(\"/signIn\");\n      return;\n    } // if a verified user is logged in, create a new user image object with the object id of the image as the image id of the user image\n\n\n    let newImage = {\n      imageId: image._id,\n      component: image.component\n    }; // post the new user image to the database\n\n    const response = await axios.post(\"http://localhost:5000/user_images/add\", newImage, {\n      headers: {\n        \"x-auth-token\": userData.token\n      }\n    });\n    console.log(response.data._id); // user is taken to coloring page with the object \n\n    history.push(`/coloringpage/${response.data._id}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Choose an image to color!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"image-gallery\",\n      children: allImages.map((image, i) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"image-card\",\n            id: \"gallery\",\n            onClick: () => colorImage(image),\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: image.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this), image.component !== undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"disney\",\n                className: \"new-image\",\n                src: image.svg_url\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 41\n              }, this)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: \"Loading\"\n            }, void 0, false)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ImageGallery, \"wrPRVj4R8akAOhbBfi7UQM16Bxs=\", false, function () {\n  return [useHistory];\n});\n\n_c = ImageGallery;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageGallery\");","map":{"version":3,"sources":["/Users/Hilary/Documents/CodeProjects/project-disney_villains/src/components/ImageGallery.js"],"names":["React","useState","useEffect","useContext","useRef","UserContext","useHistory","axios","ImageGallery","allImages","addImage","userData","history","fetchItems","response","get","data","console","log","colorImage","image","token","push","newImage","imageId","_id","component","post","headers","map","i","title","undefined","svg_url"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACnC,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBT,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAtC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAeR,UAAU,CAACE,WAAD,CAA/B;AACA,QAAMO,OAAO,GAAGN,UAAU,EAA1B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMW,UAAU,GAAG,YAAY;AAC3B,YAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CACnB,iCADmB,CAAvB;AAGAL,MAAAA,QAAQ,CAACI,QAAQ,CAACE,IAAV,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AACH,KAND;;AAOAI,IAAAA,UAAU;AACb,GAVQ,CAAT;;AAYA,QAAMM,UAAU,GAAG,MAAOC,KAAP,IAAiB;AAChC;AACA,QAAI,CAACT,QAAQ,CAACU,KAAd,EAAqB;AACjBT,MAAAA,OAAO,CAACU,IAAR,CAAa,SAAb;AACA;AACH,KAL+B,CAOhC;;;AACA,QAAIC,QAAQ,GAAG;AAAEC,MAAAA,OAAO,EAAEJ,KAAK,CAACK,GAAjB;AAAsBC,MAAAA,SAAS,EAAEN,KAAK,CAACM;AAAvC,KAAf,CARgC,CAUhC;;AACA,UAAMZ,QAAQ,GAAG,MAAMP,KAAK,CAACoB,IAAN,CACnB,uCADmB,EAEnBJ,QAFmB,EAGnB;AAAEK,MAAAA,OAAO,EAAE;AAAE,wBAAgBjB,QAAQ,CAACU;AAA3B;AAAX,KAHmB,CAAvB;AAKAJ,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACE,IAAT,CAAcS,GAA1B,EAhBgC,CAiBhC;;AACAb,IAAAA,OAAO,CAACU,IAAR,CAAc,iBAAgBR,QAAQ,CAACE,IAAT,CAAcS,GAAI,EAAhD;AACH,GAnBD;;AAqBA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,KAAK,EAAC,eAAX;AAAA,gBAEKhB,SAAS,CAACoB,GAAV,CAAc,CAACT,KAAD,EAAQU,CAAR,KAAc;AACzB,4BACI;AAAA,iCACI;AAAK,YAAA,KAAK,EAAC,YAAX;AAAwB,YAAA,EAAE,EAAC,SAA3B;AAAqC,YAAA,OAAO,EAAE,MAAMX,UAAU,CAACC,KAAD,CAA9D;AAAA,oCACI;AAAA,wBAAKA,KAAK,CAACW;AAAX;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEKX,KAAK,CAACM,SAAN,KAAoBM,SAApB,gBACG;AAAA,qCACI;AAAK,gBAAA,GAAG,EAAC,QAAT;AAAkB,gBAAA,SAAS,EAAC,WAA5B;AAAwC,gBAAA,GAAG,EAAEZ,KAAK,CAACa;AAAnD;AAAA;AAAA;AAAA;AAAA;AADJ,6BADH,gBAKK;AAAA;AAAA,6BAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,yBADJ;AAaH,OAdA;AAFL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAyBH;;GA/DuBzB,Y;UAGJF,U;;;KAHIE,Y","sourcesContent":["import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport UserContext from \"../context/UserContext\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from 'axios';\n\n// Sources:\n// https://uxdesign.cc/5-steps-to-create-a-simple-digital-coloring-book-in-react-3d4f5b2af822\n// MERN Stack Tutorial with Auth (8 part series):\n// https://www.youtube.com/watch?v=4_ZiJGY5F38\n\nexport default function ImageGallery() {\n    const [allImages, addImage] = useState([{}]);\n    const { userData } = useContext(UserContext);\n    const history = useHistory();\n\n    useEffect(() => {\n        // Uses get route to fetch all images frorm the database\n        const fetchItems = async () => {\n            const response = await axios.get(\n                \"http://localhost:5000/image/all\",\n            );\n            addImage(response.data);\n            console.log(allImages);\n        }\n        fetchItems();\n    })\n\n    const colorImage = async (image) => {\n        // if user is not logged in the user is taken to the sign in page\n        if (!userData.token) {\n            history.push(\"/signIn\")\n            return\n        }\n\n        // if a verified user is logged in, create a new user image object with the object id of the image as the image id of the user image\n        let newImage = { imageId: image._id, component: image.component };\n\n        // post the new user image to the database\n        const response = await axios.post(\n            \"http://localhost:5000/user_images/add\",\n            newImage,\n            { headers: { \"x-auth-token\": userData.token } },\n        );\n        console.log(response.data._id)\n        // user is taken to coloring page with the object \n        history.push(`/coloringpage/${response.data._id}`)\n    }\n\n    return (\n        <>\n            <h1>Choose an image to color!</h1>\n            <div class=\"image-gallery\">\n                {/* Loops through all of the images in the database and displays all of them with a title */}\n                {allImages.map((image, i) => {\n                    return (\n                        <>\n                            <div class=\"image-card\" id=\"gallery\" onClick={() => colorImage(image)}>\n                                <h4>{image.title}</h4>\n                                {image.component !== undefined ?\n                                    <>\n                                        <img alt=\"disney\" className=\"new-image\" src={image.svg_url} />\n                                       \n                                    </>\n                                    : <>Loading</>}\n                            </div>\n                        </>\n                    )\n                }\n                )\n                }\n            </div>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}