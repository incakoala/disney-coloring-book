{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Hilary/Documents/CodeProjects/project-disney_villains/src/components/userImageCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport UserContext from \"../context/UserContext\";\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport ColoredInImage from \"./images/coloredInImage\";\nexport default function UserImageCard(props) {\n  _s();\n\n  const [image, setImage] = useState({});\n  const {\n    userData\n  } = useContext(UserContext);\n  const history = useHistory(); // Sources:\n  // https://medium.com/@beaucarnes/learn-the-mern-stack-by-building-an-exercise-tracker-mern-tutorial-59c13c1237a1\n  // https://uxdesign.cc/5-steps-to-create-a-simple-digital-coloring-book-in-react-3d4f5b2af822\n  // MERN Stack Tutorial with Auth (8 part series):\n  // https://www.youtube.com/watch?v=4_ZiJGY5F38\n  // image is set to userImage object passed in as props\n\n  useEffect(() => {\n    setImage(props.userImage);\n  }, [props]); // downloadImage function sends user to imageDownload page with user image object id \n\n  const downloadImage = () => {\n    history.push(`/imageDownload/${image._id}`);\n  }; // function that calls delete route to delete specific user image for a specific verified user\n\n\n  const deleteImage = async id => {\n    if (!userData.token) {\n      history.push(\"/\");\n      return;\n    } // message to confirm user image deletion\n\n\n    swal({\n      title: \"Delete image?\",\n      text: \"This cannot be reversed.\",\n      buttons: true\n    }) // uses delete route to delete a specific user image from a specific verified user\n    .then(async toDelete => {\n      if (toDelete) {\n        await axios.delete(`http://localhost:5000/user_images/${id}`, {\n          headers: {\n            \"x-auth-token\": userData.token\n          }\n        });\n      }\n    });\n  }; // function takes user to the coloring page for that user image (referenced by user image object id)\n\n\n  const editImage = () => {\n    history.push(`/coloringpage/${image._id}`);\n  }; // function that updates public value in userImage object in order to showcase image or unpublish\n\n\n  const showcaseImage = async id => {\n    image.public = image.public === true ? image.public = false : image.public = true; // set userImage object\n\n    setImage({ ...image\n    }); // post user image with updated value of public\n\n    try {\n      const response = await axios.post(`http://localhost:5000/user_images/add/${id}`, image, {\n        headers: {\n          \"x-auth-token\": userData.token\n        }\n      });\n      console.log(response);\n    } catch (err) {\n      console.log(\"Unable to save\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-card\",\n    children: image.component !== undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ColoredInImage, {\n        component: image.component,\n        size: props.size,\n        onFill: () => {},\n        fillColors: image.fill_colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"btn-group flex-wrap\",\n        id: \"user\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"download\",\n          onClick: () => downloadImage(),\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"delete\",\n          onClick: () => deleteImage(image._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"color-me\",\n          onClick: () => editImage(),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => showcaseImage(image._id),\n          class: image.public ? \"showcasing\" : \"unpublished\",\n          children: image.public ? \"Showcasing\" : \"Unpublished\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Loading\"\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserImageCard, \"AsQ5GF8ZB/Mo9twWKItmSNgc1Yc=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserImageCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserImageCard\");","map":{"version":3,"sources":["/Users/Hilary/Documents/CodeProjects/project-disney_villains/src/components/userImageCard.js"],"names":["React","useState","useEffect","useContext","useRef","useHistory","UserContext","axios","swal","ColoredInImage","UserImageCard","props","image","setImage","userData","history","userImage","downloadImage","push","_id","deleteImage","id","token","title","text","buttons","then","toDelete","delete","headers","editImage","showcaseImage","public","response","post","console","log","err","component","undefined","size","fill_colors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport UserContext from \"../context/UserContext\";\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport ColoredInImage from \"./images/coloredInImage\";\nexport default function UserImageCard(props) {\n    const [image, setImage] = useState({});\n    const { userData } = useContext(UserContext);\n    const history = useHistory();\n    // Sources:\n    // https://medium.com/@beaucarnes/learn-the-mern-stack-by-building-an-exercise-tracker-mern-tutorial-59c13c1237a1\n    // https://uxdesign.cc/5-steps-to-create-a-simple-digital-coloring-book-in-react-3d4f5b2af822\n    // MERN Stack Tutorial with Auth (8 part series):\n    // https://www.youtube.com/watch?v=4_ZiJGY5F38\n\n    // image is set to userImage object passed in as props\n    useEffect(() => {\n        setImage(props.userImage)\n    }, [props])\n\n    // downloadImage function sends user to imageDownload page with user image object id \n    const downloadImage = () => {\n        history.push(`/imageDownload/${image._id}`)\n    }\n\n    // function that calls delete route to delete specific user image for a specific verified user\n    const deleteImage = async (id) => {\n        if (!userData.token) {\n            history.push(\"/\")\n            return\n        }\n        // message to confirm user image deletion\n        swal({\n            title: \"Delete image?\",\n            text: \"This cannot be reversed.\",\n            buttons: true\n        })\n        // uses delete route to delete a specific user image from a specific verified user\n            .then(async (toDelete) => {\n                if (toDelete) {\n                    await axios.delete(\n                        `http://localhost:5000/user_images/${id}`,\n                        { headers: { \"x-auth-token\": userData.token } },\n                    );\n                }\n            });\n    }\n\n    // function takes user to the coloring page for that user image (referenced by user image object id)\n    const editImage = () => {\n        history.push(`/coloringpage/${image._id}`)\n    }\n\n    // function that updates public value in userImage object in order to showcase image or unpublish\n    const showcaseImage = async (id) => {\n        image.public = image.public === true ? image.public = false : image.public = true\n        // set userImage object\n        setImage({\n            ...image\n        })\n        // post user image with updated value of public\n        try {\n            const response = await axios.post(\n                `http://localhost:5000/user_images/add/${id}`,\n                image,\n                { headers: { \"x-auth-token\": userData.token } },\n            );\n            console.log(response);\n        } catch (err) {\n            console.log(\"Unable to save\");\n        }\n    }\n\n    return (\n        <div className=\"image-card\">\n            {image.component !== undefined ?\n                <>\n                {/* ColoredInImage component is passed userImage values and onFillColor function*/}\n                    <ColoredInImage component={image.component} size={props.size} onFill={() => { }} fillColors={image.fill_colors} />\n                    {/* Buttons */}\n                    <div class=\"btn-group flex-wrap\" id=\"user\">\n                        <button class=\"download\" onClick={() => downloadImage()}>Download</button>\n                        <button class=\"delete\" onClick={() => deleteImage(image._id)}>Delete</button>\n                        <button class=\"color-me\" onClick={() => editImage()}>Edit</button>\n                        <button onClick={() => showcaseImage(image._id)} class={image.public ? \"showcasing\" : \"unpublished\"}>{image.public ? \"Showcasing\" : \"Unpublished\"}</button>\n                    </div>\n                </>\n                : <>Loading</>\n            }\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}