{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Hilary/Documents/CodeProjects/project-disney_villains/src/components/coloringPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams, useHistory } from 'react-router-dom'; // import { useSelector } from 'react-redux';\n\nimport ColoredInImage from \"./images/coloredInImage\";\nimport ColorPalette from '../components/colorPalette';\nimport UserContext from \"../context/UserContext\";\nimport axios from 'axios';\nimport swal from 'sweetalert'; // const components = {\n//     \"stitch\": Stitch\n// }\n\nexport default function ColoringPage() {\n  _s();\n\n  // object id of the user image (different for each copy of the smae image)\n  let {\n    id\n  } = useParams();\n  console.log({\n    id\n  });\n  const [userImage, setUserImage] = useState({});\n  const [color, setColor] = useState(\"blue\");\n  const [fetched, setFetched] = useState(false);\n  const history = useHistory();\n  const {\n    userData\n  } = useContext(UserContext);\n  useEffect(() => {\n    // getting user image object from database using the object id\n    const fetchItems = async () => {\n      if (!fetched) {\n        const response = await axios.get(`http://localhost:5000/user_images/${id}`, {\n          headers: {\n            \"x-auth-token\": userData.token\n          }\n        }); // set the user image \n\n        setUserImage(response.data);\n        console.log(response.data);\n        setFetched(true);\n      }\n    };\n\n    fetchItems();\n  });\n\n  const onFillColor = async i => {\n    let newFillColors = userImage.fill_colors.slice(0);\n    newFillColors[i] = color;\n    userImage.fill_colors = newFillColors;\n    setUserImage({ ...userImage\n    });\n    console.log(userImage);\n\n    try {\n      const response = await axios.post(`http://localhost:5000/user_images/${id}`, userImage, {\n        headers: {\n          \"x-auth-token\": userData.token\n        }\n      });\n      console.log(response);\n    } catch (err) {\n      console.log(\"Unable to save\");\n    }\n  };\n\n  const deleteImage = id => {\n    if (!userData.token) {\n      history.push(\"/\");\n      return;\n    }\n\n    swal({\n      title: \"Delete image?\",\n      text: \"This cannot be reversed.\",\n      buttons: true\n    }).then(async willDelete => {\n      if (willDelete) {\n        await axios.delete(`http://localhost:5000/user_images/${id}`, {\n          headers: {\n            \"x-auth-token\": userData.token\n          }\n        });\n      }\n    }).then(history.push(\"/userGallery\"));\n  };\n\n  const resetColors = async id => {\n    let newFillColors = [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"];\n    userImage.fill_colors = newFillColors;\n    setUserImage({ ...userImage\n    });\n\n    try {\n      const response = await axios.post(`http://localhost:5000/user_images/${id}`, userImage, {\n        headers: {\n          \"x-auth-token\": userData.token\n        }\n      });\n      console.log(response);\n    } catch (err) {\n      console.log(\"Unable to save\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-4 mx-5 my-5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ColoredInImage, {\n      size: \"large\",\n      component: userImage.component,\n      onFill: onFillColor,\n      fillColors: userImage.fill_colors\n    }, userImage._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ColorPalette, {\n      currentColor: color,\n      changeColor: setColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => deleteImage(userImage._id),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => resetColors(userImage._id),\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        history.push(\"/userGallery\");\n      },\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n} // import React, {useState, useContext, useEffect, useCallback} from \"react\";\n// import {useParams, useHistory} from 'react-router-dom';\n// // import { useSelector } from 'react-redux';\n// import ColoredInImage from \"./images/coloredInImage\";\n// import ColorPalette from '../components/colorPalette'\n// import UserContext from \"../context/UserContext\";\n// import Stitch from \"./images/stitch\";\n// import Minnie from \"./images/minnie\";\n// import axios from 'axios';\n// // const components = {\n// //     \"stitch\": Stitch\n// // }\n// export default function ColoringPage() {\n//     // object id of the user image (different for each copy of the smae image)\n//     let {id} = useParams();\n//     console.log({id})\n//     const [userImage, setUserImage] = useState({});\n//     const [color, setColor] = useState(\"blue\");\n//     const [fetched, setFetched] = useState(false);\n//     // const [ColorImage, setColorImage] = useState();\n//     const history = useHistory();\n//     const {userData} = useContext(UserContext);\n//     useEffect(() => {\n//         // getting user image object from database using the object id\n//         const fetchItems = async () => {\n//             if (!fetched) {\n//                 const response = await axios.get(\n//                     `http://localhost:5000/user_images/${id}`, \n//                     {headers: {\"x-auth-token\": userData.token}},\n//                 );\n//                 // set the user image \n//                 setUserImage(response.data)\n//                 // setColorImage(components[userImage.component])\n//                 console.log(response.data)\n//                 setFetched(true)\n//             }\n//           }\n//         fetchItems();  \n//     })\n//     const onFillColor = async (i) => {\n//         let newFillColors = userImage.fill_colors.slice(0)\n//         console.log(newFillColors[i])\n//         console.log(color)\n//         newFillColors[i] = color \n//         console.log(newFillColors)\n//         userImage.fill_colors = newFillColors\n//         setUserImage({\n//             ...userImage\n//         })\n//         console.log(userImage)\n//         try{\n//             //var token = JSON.parse(localStorage.getItem(\"auth-token\"));\n//             const response = await axios.post(\n//             `http://localhost:5000/user_images/${id}`, \n//             userImage,\n//               {headers: {\"x-auth-token\": userData.token}},\n//             );\n//             console.log(response);\n//         } catch(err){\n//             console.log(\"no\");\n//           }\n//         // const response = axios.post(\n//         //     `http://localhost:5000/user_images/${id}`, \n//         //     {headers: {\"x-auth-token\": userData.token}},\n//         //     userImage,\n//         // );\n//         // console.log(response)\n//     //     fetch(`https://color-by-nature-api.herokuapp.com/user_images/${id}`,{\n//     //         method: 'PATCH',\n//     //         headers: {\n//     //             'Content-Type': 'application/json',\n//     //             'Authorization': `bearer ${token}`},\n//     //         body: JSON.stringify({id: userImage.id, fill_colors: newFillColors})\n//     //     })\n//     //     .then(r => r.json())\n//     //     .then(console.log)   \n//     }\n//     return(\n//         <div className=\"coloring-page\">\n//             <ColorPalette currentColor={color} changeColor={setColor} />\n//             {/* <div id=\"coloring-image-container\" >  */}\n//                 <ColoredInImage size=\"large\" key={userImage._id} component={userImage.component} onFill={onFillColor} fillColors={userImage.fill_colors}/>\n//                 {/* <ColoredInImage size=\"large\" component={userImage.component} onFill={onFillColor} fillColors={userImage.fill_colors}/> */}\n//                 {/* <ColorImage id=\"svg-image\" onFillColor={onFillColor} fillColors={userImage.fill_colors} />    */}\n//             {/* </div> */}\n//         </div>\n//      )\n// }\n\n_s(ColoringPage, \"kUH1qW0HFRMhVNdy/GYhwhjLkZQ=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = ColoringPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColoringPage\");","map":{"version":3,"sources":["/Users/Hilary/Documents/CodeProjects/project-disney_villains/src/components/coloringPage.js"],"names":["React","useState","useContext","useEffect","useCallback","useParams","useHistory","ColoredInImage","ColorPalette","UserContext","axios","swal","ColoringPage","id","console","log","userImage","setUserImage","color","setColor","fetched","setFetched","history","userData","fetchItems","response","get","headers","token","data","onFillColor","i","newFillColors","fill_colors","slice","post","err","deleteImage","push","title","text","buttons","then","willDelete","delete","resetColors","component","_id"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams, useHistory } from 'react-router-dom';\n// import { useSelector } from 'react-redux';\nimport ColoredInImage from \"./images/coloredInImage\";\nimport ColorPalette from '../components/colorPalette'\nimport UserContext from \"../context/UserContext\";\nimport axios from 'axios';\nimport swal from 'sweetalert';\n\n// const components = {\n//     \"stitch\": Stitch\n// }\n\nexport default function ColoringPage() {\n\n    // object id of the user image (different for each copy of the smae image)\n    let { id } = useParams();\n    console.log({ id })\n    const [userImage, setUserImage] = useState({});\n    const [color, setColor] = useState(\"blue\");\n    const [fetched, setFetched] = useState(false);\n    const history = useHistory();\n\n    const { userData } = useContext(UserContext);\n\n    useEffect(() => {\n        // getting user image object from database using the object id\n        const fetchItems = async () => {\n            if (!fetched) {\n                const response = await axios.get(\n                    `http://localhost:5000/user_images/${id}`,\n                    { headers: { \"x-auth-token\": userData.token } },\n                );\n                // set the user image \n                setUserImage(response.data)\n                console.log(response.data)\n                setFetched(true)\n            }\n        }\n        fetchItems();\n    })\n\n    const onFillColor = async (i) => {\n        let newFillColors = userImage.fill_colors.slice(0)\n        newFillColors[i] = color\n        userImage.fill_colors = newFillColors\n\n        setUserImage({\n            ...userImage\n        })\n\n        console.log(userImage)\n        try {\n            const response = await axios.post(\n                `http://localhost:5000/user_images/${id}`,\n                userImage,\n                { headers: { \"x-auth-token\": userData.token } },\n            );\n            console.log(response);\n        } catch (err) {\n            console.log(\"Unable to save\");\n        }\n    }\n\n    const deleteImage = (id) => {\n        if (!userData.token) {\n            history.push(\"/\")\n            return\n        }\n        swal({\n            title: \"Delete image?\",\n            text: \"This cannot be reversed.\",\n            buttons: true\n        })\n            .then(async (willDelete) => {\n                if (willDelete) {\n                    await axios.delete(\n                        `http://localhost:5000/user_images/${id}`,\n                        { headers: { \"x-auth-token\": userData.token } },\n                    );\n                }\n            })\n            .then(\n                history.push(\"/userGallery\")\n            )\n    }\n\n    const resetColors = async (id) => {\n        let newFillColors = [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"]\n        userImage.fill_colors = newFillColors\n        setUserImage({\n            ...userImage\n        })\n\n        try {\n            const response = await axios.post(\n                `http://localhost:5000/user_images/${id}`,\n                userImage,\n                { headers: { \"x-auth-token\": userData.token } },\n            );\n            console.log(response);\n        } catch (err) {\n            console.log(\"Unable to save\");\n        }\n    }\n\n    return (\n        <div class=\"row\">\n            <div className=\"col-4 mx-5 my-5\"></div>\n            <ColoredInImage size=\"large\" key={userImage._id} component={userImage.component} onFill={onFillColor} fillColors={userImage.fill_colors} />\n            <ColorPalette currentColor={color} changeColor={setColor} />\n            <button onClick={() => deleteImage(userImage._id)}>Delete</button> |\n            <button onClick={() => resetColors(userImage._id)}>Reset</button> |\n            <button onClick={() => { history.push(\"/userGallery\") }}>Done</button>\n        </div>\n    )\n}\n\n\n// import React, {useState, useContext, useEffect, useCallback} from \"react\";\n// import {useParams, useHistory} from 'react-router-dom';\n// // import { useSelector } from 'react-redux';\n// import ColoredInImage from \"./images/coloredInImage\";\n// import ColorPalette from '../components/colorPalette'\n// import UserContext from \"../context/UserContext\";\n// import Stitch from \"./images/stitch\";\n// import Minnie from \"./images/minnie\";\n// import axios from 'axios';\n\n// // const components = {\n// //     \"stitch\": Stitch\n// // }\n\n// export default function ColoringPage() {\n\n//     // object id of the user image (different for each copy of the smae image)\n//     let {id} = useParams();\n//     console.log({id})\n//     const [userImage, setUserImage] = useState({});\n//     const [color, setColor] = useState(\"blue\");\n//     const [fetched, setFetched] = useState(false);\n//     // const [ColorImage, setColorImage] = useState();\n//     const history = useHistory();\n\n//     const {userData} = useContext(UserContext);\n\n//     useEffect(() => {\n//         // getting user image object from database using the object id\n//         const fetchItems = async () => {\n//             if (!fetched) {\n//                 const response = await axios.get(\n//                     `http://localhost:5000/user_images/${id}`, \n//                     {headers: {\"x-auth-token\": userData.token}},\n//                 );\n//                 // set the user image \n//                 setUserImage(response.data)\n//                 // setColorImage(components[userImage.component])\n//                 console.log(response.data)\n//                 setFetched(true)\n//             }\n//           }\n//         fetchItems();  \n//     })\n\n//     const onFillColor = async (i) => {\n//         let newFillColors = userImage.fill_colors.slice(0)\n//         console.log(newFillColors[i])\n//         console.log(color)\n//         newFillColors[i] = color \n\n//         console.log(newFillColors)\n\n//         userImage.fill_colors = newFillColors\n\n//         setUserImage({\n//             ...userImage\n//         })\n\n//         console.log(userImage)\n//         try{\n//             //var token = JSON.parse(localStorage.getItem(\"auth-token\"));\n//             const response = await axios.post(\n//             `http://localhost:5000/user_images/${id}`, \n//             userImage,\n//               {headers: {\"x-auth-token\": userData.token}},\n//             );\n//             console.log(response);\n//         } catch(err){\n//             console.log(\"no\");\n//           }\n\n//         // const response = axios.post(\n//         //     `http://localhost:5000/user_images/${id}`, \n//         //     {headers: {\"x-auth-token\": userData.token}},\n//         //     userImage,\n//         // );\n//         // console.log(response)\n\n//     //     fetch(`https://color-by-nature-api.herokuapp.com/user_images/${id}`,{\n//     //         method: 'PATCH',\n//     //         headers: {\n//     //             'Content-Type': 'application/json',\n//     //             'Authorization': `bearer ${token}`},\n//     //         body: JSON.stringify({id: userImage.id, fill_colors: newFillColors})\n//     //     })\n//     //     .then(r => r.json())\n//     //     .then(console.log)   \n//     }\n\n//     return(\n//         <div className=\"coloring-page\">\n//             <ColorPalette currentColor={color} changeColor={setColor} />\n//             {/* <div id=\"coloring-image-container\" >  */}\n//                 <ColoredInImage size=\"large\" key={userImage._id} component={userImage.component} onFill={onFillColor} fillColors={userImage.fill_colors}/>\n//                 {/* <ColoredInImage size=\"large\" component={userImage.component} onFill={onFillColor} fillColors={userImage.fill_colors}/> */}\n//                 {/* <ColorImage id=\"svg-image\" onFillColor={onFillColor} fillColors={userImage.fill_colors} />    */}\n//             {/* </div> */}\n\n//         </div>\n//      )\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}