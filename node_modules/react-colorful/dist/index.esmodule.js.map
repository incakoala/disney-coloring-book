{"version":3,"file":"index.esmodule.js","sources":["../src/hooks/useIsomorphicLayoutEffect.ts","../src/hooks/useEventCallback.ts","../src/utils/clamp.ts","../src/components/common/Interactive.tsx","../src/utils/format.ts","../src/components/common/Pointer.tsx","../src/utils/round.ts","../src/utils/convert.ts","../src/components/common/Hue.tsx","../src/components/common/Saturation.tsx","../src/utils/compare.ts","../src/hooks/useColorManipulation.ts","../src/components/common/ColorPicker.tsx","../src/components/HexColorPicker.tsx","../src/components/common/Alpha.tsx","../src/components/common/AlphaColorPicker.tsx","../src/components/HslaColorPicker.tsx","../src/components/HslaStringColorPicker.tsx","../src/components/HslColorPicker.tsx","../src/components/HslStringColorPicker.tsx","../src/components/HsvaColorPicker.tsx","../src/components/HsvaStringColorPicker.tsx","../src/components/HsvColorPicker.tsx","../src/components/HsvStringColorPicker.tsx","../src/components/RgbaColorPicker.tsx","../src/components/RgbaStringColorPicker.tsx","../src/components/RgbColorPicker.tsx","../src/components/RgbStringColorPicker.tsx","../src/utils/validate.ts","../src/components/HexColorInput.tsx"],"sourcesContent":["import { useLayoutEffect, useEffect } from \"react\";\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nexport const useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n","import { useRef, useEffect, useCallback } from \"react\";\n\n// Saves incoming handler to the ref in order to avoid \"useCallback hell\"\nfunction useEventCallback<T>(handler?: (value: T) => void): (value: T) => void {\n  const callbackRef = useRef(handler);\n\n  useEffect(() => {\n    callbackRef.current = handler;\n  });\n\n  return useCallback((value: T) => callbackRef.current && callbackRef.current(value), []);\n}\n\nexport { useEventCallback };\n","// Clamps a value between an upper and lower bound.\n// We use ternary operators because it makes the minified code\n// 2 times shorter then `Math.min(Math.max(a,b),c)`\nexport const clamp = (number: number, min = 0, max = 1): number => {\n  return number > max ? max : number < min ? min : number;\n};\n","import React, { useState, useRef, useCallback } from \"react\";\n\nimport { useIsomorphicLayoutEffect } from \"../../hooks/useIsomorphicLayoutEffect\";\nimport { useEventCallback } from \"../../hooks/useEventCallback\";\nimport { clamp } from \"../../utils/clamp\";\n\nexport interface Interaction {\n  left: number;\n  top: number;\n}\n\n// Check if an event was triggered by touch\nconst isTouch = (e: MouseEvent | TouchEvent): e is TouchEvent => \"touches\" in e;\n\n// Returns a relative position of the pointer inside the node's bounding box\nconst getRelativePosition = (node: HTMLDivElement, event: MouseEvent | TouchEvent): Interaction => {\n  const rect = node.getBoundingClientRect();\n\n  // Get user's pointer position from `touches` array if it's a `TouchEvent`\n  const pointer = isTouch(event) ? event.touches[0] : (event as MouseEvent);\n\n  return {\n    left: clamp((pointer.pageX - (rect.left + window.pageXOffset)) / rect.width),\n    top: clamp((pointer.pageY - (rect.top + window.pageYOffset)) / rect.height),\n  };\n};\n\ninterface Props {\n  onMove: (interaction: Interaction) => void;\n  onKey: (offset: Interaction) => void;\n  children: React.ReactNode;\n}\n\nconst InteractiveBase = ({ onMove, onKey, ...rest }: Props) => {\n  const container = useRef<HTMLDivElement>(null);\n  const hasTouched = useRef(false);\n  const [isDragging, setDragging] = useState(false);\n  const onMoveCallback = useEventCallback<Interaction>(onMove);\n  const onKeyCallback = useEventCallback<Interaction>(onKey);\n\n  // Prevent mobile browsers from handling mouse events (conflicting with touch ones).\n  // If we detected a touch interaction before, we prefer reacting to touch events only.\n  const isValid = (event: MouseEvent | TouchEvent): boolean => {\n    if (hasTouched.current && !isTouch(event)) return false;\n    if (!hasTouched.current) hasTouched.current = isTouch(event);\n    return true;\n  };\n\n  const handleMove = useCallback(\n    (event: MouseEvent | TouchEvent) => {\n      event.preventDefault();\n      if (container.current) onMoveCallback(getRelativePosition(container.current, event));\n    },\n    [onMoveCallback]\n  );\n\n  const handleMoveStart = useCallback(\n    ({ nativeEvent: event }: React.MouseEvent | React.TouchEvent) => {\n      event.preventDefault();\n\n      if (!isValid(event)) return;\n\n      // The node/ref must actually exist when user start an interaction.\n      // We won't suppress the ESLint warning though, as it should probably be something to be aware of.\n      onMoveCallback(getRelativePosition(container.current!, event));\n      setDragging(true);\n    },\n    [onMoveCallback]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const keyCode = event.which || event.keyCode;\n\n      // Ignore all keys except arrow ones\n      if (keyCode < 37 || keyCode > 40) return;\n      // Do not scroll page by arrow keys when document is focused on the element\n      event.preventDefault();\n      // Send relative offset to the parent component.\n      // We use codes (37←, 38↑, 39→, 40↓) instead of keys ('ArrowRight', 'ArrowDown', etc)\n      // to reduce the size of the library\n      onKeyCallback({\n        left: keyCode === 39 ? 0.05 : keyCode === 37 ? -0.05 : 0,\n        top: keyCode === 40 ? 0.05 : keyCode === 38 ? -0.05 : 0,\n      });\n    },\n    [onKeyCallback]\n  );\n\n  const handleMoveEnd = useCallback(() => setDragging(false), []);\n\n  const toggleDocumentEvents = useCallback(\n    (state) => {\n      // add or remove additional pointer event listeners\n      const toggleEvent = state ? window.addEventListener : window.removeEventListener;\n      toggleEvent(hasTouched.current ? \"touchmove\" : \"mousemove\", handleMove);\n      toggleEvent(hasTouched.current ? \"touchend\" : \"mouseup\", handleMoveEnd);\n    },\n    [handleMove, handleMoveEnd]\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    toggleDocumentEvents(isDragging);\n    return () => {\n      isDragging && toggleDocumentEvents(false);\n    };\n  }, [isDragging, toggleDocumentEvents]);\n\n  return (\n    <div\n      {...rest}\n      className=\"react-colorful__interactive\"\n      ref={container}\n      onTouchStart={handleMoveStart}\n      onMouseDown={handleMoveStart}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      role=\"slider\"\n    />\n  );\n};\n\nexport const Interactive = React.memo(InteractiveBase);\n","export const formatClassName = (names: unknown[]): string => names.filter(Boolean).join(\" \");\n","import React from \"react\";\nimport { formatClassName } from \"../../utils/format\";\n\ninterface Props {\n  className?: string;\n  top?: number;\n  left: number;\n  color: string;\n}\n\nexport const Pointer = ({ className, color, left, top = 0.5 }: Props): JSX.Element => {\n  const nodeClassName = formatClassName([\"react-colorful__pointer\", className]);\n\n  const style = {\n    top: `${top * 100}%`,\n    left: `${left * 100}%`,\n  };\n\n  return (\n    <div className={nodeClassName} style={style}>\n      <div className=\"react-colorful__pointer-fill\" style={{ backgroundColor: color }} />\n    </div>\n  );\n};\n","export const round = (number: number, digits = 0, base = Math.pow(10, digits)): number => {\n  return Math.round(base * number) / base;\n};\n","import { round } from \"./round\";\nimport { RgbaColor, RgbColor, HslaColor, HslColor, HsvaColor, HsvColor } from \"../types\";\n\nexport const hexToHsva = (hex: string): HsvaColor => rgbaToHsva(hexToRgba(hex));\n\nexport const hexToRgba = (hex: string): RgbaColor => {\n  if (hex[0] === \"#\") hex = hex.substr(1);\n\n  if (hex.length < 6) {\n    return {\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1,\n    };\n  }\n\n  return {\n    r: parseInt(hex.substr(0, 2), 16),\n    g: parseInt(hex.substr(2, 2), 16),\n    b: parseInt(hex.substr(4, 2), 16),\n    a: 1,\n  };\n};\n\nexport const hslaStringToHsva = (hslString: string): HsvaColor => {\n  const matcher = /hsla?\\((\\d+\\.?\\d*),\\s*(\\d+\\.?\\d*)%?,\\s*(\\d+\\.?\\d*)%?,?\\s*(\\d+\\.?\\d*)?\\)/;\n  const match = matcher.exec(hslString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return hslaToHsva({\n    h: Number(match[1]),\n    s: Number(match[2]),\n    l: Number(match[3]),\n    a: match[4] === undefined ? 1 : Number(match[4]),\n  });\n};\n\nexport const hslStringToHsva = hslaStringToHsva;\n\nexport const hslaToHsva = ({ h, s, l, a }: HslaColor): HsvaColor => {\n  s *= (l < 50 ? l : 100 - l) / 100;\n\n  return {\n    h: h,\n    s: s > 0 ? ((2 * s) / (l + s)) * 100 : 0,\n    v: l + s,\n    a,\n  };\n};\n\nexport const hsvaToHex = (hsva: HsvaColor): string => rgbaToHex(hsvaToRgba(hsva));\n\nexport const hsvaToHsla = ({ h, s, v, a }: HsvaColor): HslaColor => {\n  const hh = ((200 - s) * v) / 100;\n\n  return {\n    h: round(h),\n    s: round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n    l: round(hh / 2),\n    a: round(a, 2),\n  };\n};\n\nexport const hsvaToHslString = (hsva: HsvaColor): string => {\n  const { h, s, l } = hsvaToHsla(hsva);\n  return `hsl(${h}, ${s}%, ${l}%)`;\n};\n\nexport const hsvaToHsvString = (hsva: HsvaColor): string => {\n  const { h, s, v } = roundHsva(hsva);\n  return `hsv(${h}, ${s}%, ${v}%)`;\n};\n\nexport const hsvaToHsvaString = (hsva: HsvaColor): string => {\n  const { h, s, v, a } = roundHsva(hsva);\n  return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n};\n\nexport const hsvaToHslaString = (hsva: HsvaColor): string => {\n  const { h, s, l, a } = hsvaToHsla(hsva);\n  return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n};\n\nexport const hsvaToRgba = ({ h, s, v, a }: HsvaColor): RgbaColor => {\n  h = (h / 360) * 6;\n  s = s / 100;\n  v = v / 100;\n\n  const hh = Math.floor(h),\n    b = v * (1 - s),\n    c = v * (1 - (h - hh) * s),\n    d = v * (1 - (1 - h + hh) * s),\n    module = hh % 6;\n\n  return {\n    r: round([v, c, b, b, d, v][module] * 255),\n    g: round([d, v, v, c, b, b][module] * 255),\n    b: round([b, b, d, v, v, c][module] * 255),\n    a: round(a, 2),\n  };\n};\n\nexport const hsvaToRgbString = (hsva: HsvaColor): string => {\n  const { r, g, b } = hsvaToRgba(hsva);\n  return `rgb(${r}, ${g}, ${b})`;\n};\n\nexport const hsvaToRgbaString = (hsva: HsvaColor): string => {\n  const { r, g, b, a } = hsvaToRgba(hsva);\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n\nexport const hsvaStringToHsva = (hsvString: string): HsvaColor => {\n  const matcher = /hsva?\\((\\d+\\.?\\d*),\\s*(\\d+\\.?\\d*)%?,\\s*(\\d+\\.?\\d*)%?,?\\s*(\\d+\\.?\\d*)?\\)/;\n  const match = matcher.exec(hsvString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return roundHsva({\n    h: Number(match[1]),\n    s: Number(match[2]),\n    v: Number(match[3]),\n    a: match[4] === undefined ? 1 : Number(match[4]),\n  });\n};\n\nexport const hsvStringToHsva = hsvaStringToHsva;\n\nexport const rgbaStringToHsva = (rgbaString: string): HsvaColor => {\n  const matcher = /rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+),?\\s*(\\d+\\.?\\d*)?\\)/;\n  const match = matcher.exec(rgbaString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return rgbaToHsva({\n    r: Number(match[1]),\n    g: Number(match[2]),\n    b: Number(match[3]),\n    a: match[4] === undefined ? 1 : Number(match[4]),\n  });\n};\n\nexport const rgbStringToHsva = rgbaStringToHsva;\n\nconst format = (number: number) => {\n  const hex = number.toString(16);\n  return hex.length < 2 ? \"0\" + hex : hex;\n};\n\nexport const rgbaToHex = ({ r, g, b }: RgbaColor): string => {\n  return \"#\" + format(r) + format(g) + format(b);\n};\n\nexport const rgbaToHsva = ({ r, g, b, a }: RgbaColor): HsvaColor => {\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n\n  // prettier-ignore\n  const hh = delta\n    ? max === r\n      ? (g - b) / delta\n      : max === g\n        ? 2 + (b - r) / delta\n        : 4 + (r - g) / delta\n    : 0;\n\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? (delta / max) * 100 : 0),\n    v: round((max / 255) * 100),\n    a,\n  };\n};\n\nexport const roundHsva = (hsva: HsvaColor): HsvaColor => ({\n  h: round(hsva.h),\n  s: round(hsva.s),\n  v: round(hsva.v),\n  a: round(hsva.a, 2),\n});\n\nexport const rgbaToRgb = ({ r, g, b }: RgbaColor): RgbColor => ({ r, g, b });\n\nexport const hslaToHsl = ({ h, s, l }: HslaColor): HslColor => ({ h, s, l });\n\nexport const hsvaToHsv = (hsva: HsvaColor): HsvColor => {\n  const { h, s, v } = roundHsva(hsva);\n  return { h, s, v };\n};\n","import React from \"react\";\n\nimport { Interactive, Interaction } from \"./Interactive\";\nimport { Pointer } from \"./Pointer\";\n\nimport { hsvaToHslString } from \"../../utils/convert\";\nimport { formatClassName } from \"../../utils/format\";\nimport { clamp } from \"../../utils/clamp\";\nimport { round } from \"../../utils/round\";\n\ninterface Props {\n  className?: string;\n  hue: number;\n  onChange: (newHue: { h: number }) => void;\n}\n\nconst HueBase = ({ className, hue, onChange }: Props) => {\n  const handleMove = (interaction: Interaction) => {\n    onChange({ h: 360 * interaction.left });\n  };\n\n  const handleKey = (offset: Interaction) => {\n    // Hue measured in degrees of the color circle ranging from 0 to 360\n    onChange({\n      h: clamp(hue + offset.left * 360, 0, 360),\n    });\n  };\n\n  const nodeClassName = formatClassName([\"react-colorful__hue\", className]);\n\n  return (\n    <div className={nodeClassName}>\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Hue\"\n        aria-valuetext={round(hue)}\n      >\n        <Pointer\n          className=\"react-colorful__hue-pointer\"\n          left={hue / 360}\n          color={hsvaToHslString({ h: hue, s: 100, v: 100, a: 1 })}\n        />\n      </Interactive>\n    </div>\n  );\n};\n\nexport const Hue = React.memo(HueBase);\n","import React from \"react\";\nimport { Interactive, Interaction } from \"./Interactive\";\nimport { Pointer } from \"./Pointer\";\nimport { HsvaColor } from \"../../types\";\nimport { hsvaToHslString } from \"../../utils/convert\";\nimport { clamp } from \"../../utils/clamp\";\nimport { round } from \"../../utils/round\";\n\ninterface Props {\n  hsva: HsvaColor;\n  onChange: (newColor: { s: number; v: number }) => void;\n}\n\nconst SaturationBase = ({ hsva, onChange }: Props) => {\n  const handleMove = (interaction: Interaction) => {\n    onChange({\n      s: interaction.left * 100,\n      v: 100 - interaction.top * 100,\n    });\n  };\n\n  const handleKey = (offset: Interaction) => {\n    // Saturation and brightness always fit into [0, 100] range\n    onChange({\n      s: clamp(hsva.s + offset.left * 100, 0, 100),\n      v: clamp(hsva.v - offset.top * 100, 0, 100),\n    });\n  };\n\n  const containerStyle = {\n    backgroundColor: hsvaToHslString({ h: hsva.h, s: 100, v: 100, a: 1 }),\n  };\n\n  return (\n    <div className=\"react-colorful__saturation\" style={containerStyle}>\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Color\"\n        aria-valuetext={`Saturation ${round(hsva.s)}%, Brightness ${round(hsva.v)}%`}\n      >\n        <Pointer\n          className=\"react-colorful__saturation-pointer\"\n          top={1 - hsva.v / 100}\n          left={hsva.s / 100}\n          color={hsvaToHslString(hsva)}\n        />\n      </Interactive>\n    </div>\n  );\n};\n\nexport const Saturation = React.memo(SaturationBase);\n","import { hexToRgba } from \"./convert\";\nimport { ObjectColor } from \"../types\";\n\nexport const equalColorObjects = (first: ObjectColor, second: ObjectColor): boolean => {\n  if (first === second) return true;\n\n  for (const prop in first) {\n    // The following allows for a type-safe calling of this function (first & second have to be HSL, HSV, or RGB)\n    // with type-unsafe iterating over object keys. TS does not allow this without an index (`[key: string]: number`)\n    // on an object to define how iteration is normally done. To ensure extra keys are not allowed on our types,\n    // we must cast our object to unknown (as RGB demands `r` be a key, while `Record<string, x>` does not care if\n    // there is or not), and then as a type TS can iterate over.\n    if (\n      ((first as unknown) as Record<string, number>)[prop] !==\n      ((second as unknown) as Record<string, number>)[prop]\n    )\n      return false;\n  }\n\n  return true;\n};\n\nexport const equalColorString = (first: string, second: string): boolean => {\n  return first.replace(/\\s/g, \"\") === second.replace(/\\s/g, \"\");\n};\n\nexport const equalHex = (first: string, second: string): boolean => {\n  if (first.toLowerCase() === second.toLowerCase()) return true;\n\n  // To compare colors like `#FFF` and `ffffff` we convert them into RGB objects\n  return equalColorObjects(hexToRgba(first), hexToRgba(second));\n};\n","import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { ColorModel, AnyColor, HsvaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { useEventCallback } from \"./useEventCallback\";\n\nexport function useColorManipulation<T extends AnyColor>(\n  colorModel: ColorModel<T>,\n  color: T,\n  onChange?: (color: T) => void\n): [HsvaColor, (color: Partial<HsvaColor>) => void] {\n  // Save onChange callback in the ref for avoiding \"useCallback hell\"\n  const onChangeCallback = useEventCallback<T>(onChange);\n\n  // No matter which color model is used (HEX, RGB(A) or HSL(A)),\n  // all internal calculations are based on HSVA model\n  const [hsva, updateHsva] = useState<HsvaColor>(() => colorModel.toHsva(color));\n\n  // By using this ref we're able to prevent extra updates\n  // and the effects recursion during the color conversion\n  const cache = useRef({ color, hsva });\n\n  // Update local HSVA-value if `color` property value is changed,\n  // but only if that's not the same color that we just sent to the parent\n  useEffect(() => {\n    if (!colorModel.equal(color, cache.current.color)) {\n      const newHsva = colorModel.toHsva(color);\n      cache.current = { hsva: newHsva, color };\n      updateHsva(newHsva);\n    }\n  }, [color, colorModel]);\n\n  // Trigger `onChange` callback only if an updated color is different from cached one;\n  // save the new color to the ref to prevent unnecessary updates\n  useEffect(() => {\n    let newColor;\n    if (\n      !equalColorObjects(hsva, cache.current.hsva) &&\n      !colorModel.equal((newColor = colorModel.fromHsva(hsva)), cache.current.color)\n    ) {\n      cache.current = { hsva, color: newColor };\n      onChangeCallback(newColor);\n    }\n  }, [hsva, colorModel, onChangeCallback]);\n\n  // Merge the current HSVA color object with updated params.\n  // For example, when a child component sends `h` or `s` only\n  const handleChange = useCallback((params: Partial<HsvaColor>) => {\n    updateHsva((current) => Object.assign({}, current, params));\n  }, []);\n\n  return [hsva, handleChange];\n}\n","import React from \"react\";\n\nimport { Hue } from \"./Hue\";\nimport { Saturation } from \"./Saturation\";\n\nimport { ColorModel, ColorPickerBaseProps, AnyColor } from \"../../types\";\nimport { useColorManipulation } from \"../../hooks/useColorManipulation\";\nimport { formatClassName } from \"../../utils/format\";\n\nimport \"../../css/styles.css\";\n\ninterface Props<T extends AnyColor> extends Partial<ColorPickerBaseProps<T>> {\n  colorModel: ColorModel<T>;\n}\n\nexport const ColorPicker = <T extends AnyColor>({\n  className,\n  colorModel,\n  color = colorModel.defaultColor,\n  onChange,\n}: Props<T>): JSX.Element => {\n  const [hsva, updateHsva] = useColorManipulation<T>(colorModel, color, onChange);\n\n  const nodeClassName = formatClassName([\"react-colorful\", className]);\n\n  return (\n    <div className={nodeClassName}>\n      <Saturation hsva={hsva} onChange={updateHsva} />\n      <Hue hue={hsva.h} onChange={updateHsva} className=\"react-colorful__last-control\" />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalHex } from \"../utils/compare\";\nimport { hexToHsva, hsvaToHex } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"000\",\n  toHsva: hexToHsva,\n  fromHsva: hsvaToHex,\n  equal: equalHex,\n};\n\nexport const HexColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n","import React from \"react\";\n\nimport { Interactive, Interaction } from \"./Interactive\";\nimport { Pointer } from \"./Pointer\";\n\nimport { hsvaToHslaString } from \"../../utils/convert\";\nimport { formatClassName } from \"../../utils/format\";\nimport { clamp } from \"../../utils/clamp\";\nimport { round } from \"../../utils/round\";\nimport { HsvaColor } from \"../../types\";\n\ninterface Props {\n  className?: string;\n  hsva: HsvaColor;\n  onChange: (newAlpha: { a: number }) => void;\n}\n\nexport const Alpha = ({ className, hsva, onChange }: Props): JSX.Element => {\n  const handleMove = (interaction: Interaction) => {\n    onChange({ a: interaction.left });\n  };\n\n  const handleKey = (offset: Interaction) => {\n    // Alpha always fit into [0, 1] range\n    onChange({ a: clamp(hsva.a + offset.left) });\n  };\n\n  // We use `Object.assign` instead of the spread operator\n  // to prevent adding the polyfill (about 150 bytes gzipped)\n  const colorFrom = hsvaToHslaString(Object.assign({}, hsva, { a: 0 }));\n  const colorTo = hsvaToHslaString(Object.assign({}, hsva, { a: 1 }));\n\n  const gradientStyle = {\n    backgroundImage: `linear-gradient(90deg, ${colorFrom}, ${colorTo})`,\n  };\n\n  const nodeClassName = formatClassName([\"react-colorful__alpha\", className]);\n\n  return (\n    <div className={nodeClassName}>\n      <div className=\"react-colorful__alpha-gradient\" style={gradientStyle} />\n      <Interactive\n        onMove={handleMove}\n        onKey={handleKey}\n        aria-label=\"Alpha\"\n        aria-valuetext={`${round(hsva.a * 100)}%`}\n      >\n        <Pointer\n          className=\"react-colorful__alpha-pointer\"\n          left={hsva.a}\n          color={hsvaToHslaString(hsva)}\n        />\n      </Interactive>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Hue } from \"./Hue\";\nimport { Saturation } from \"./Saturation\";\nimport { Alpha } from \"./Alpha\";\n\nimport { ColorModel, ColorPickerBaseProps, AnyColor } from \"../../types\";\nimport { useColorManipulation } from \"../../hooks/useColorManipulation\";\nimport { formatClassName } from \"../../utils/format\";\n\nimport \"../../css/styles.css\";\n\ninterface Props<T extends AnyColor> extends Partial<ColorPickerBaseProps<T>> {\n  colorModel: ColorModel<T>;\n}\n\nexport const AlphaColorPicker = <T extends AnyColor>({\n  className,\n  colorModel,\n  color = colorModel.defaultColor,\n  onChange,\n}: Props<T>): JSX.Element => {\n  const [hsva, updateHsva] = useColorManipulation<T>(colorModel, color, onChange);\n\n  const nodeClassName = formatClassName([\"react-colorful\", className]);\n\n  return (\n    <div className={nodeClassName}>\n      <Saturation hsva={hsva} onChange={updateHsva} />\n      <Hue hue={hsva.h} onChange={updateHsva} />\n      <Alpha hsva={hsva} onChange={updateHsva} className=\"react-colorful__last-control\" />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HslaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { hslaToHsva, hsvaToHsla } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HslaColor> = {\n  defaultColor: { h: 0, s: 0, l: 0, a: 1 },\n  toHsva: hslaToHsva,\n  fromHsva: hsvaToHsla,\n  equal: equalColorObjects,\n};\n\nexport const HslaColorPicker = (props: Partial<ColorPickerBaseProps<HslaColor>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n","import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hslaStringToHsva, hsvaToHslaString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsla(0, 0%, 0%, 1)\",\n  toHsva: hslaStringToHsva,\n  fromHsva: hsvaToHslaString,\n  equal: equalColorString,\n};\n\nexport const HslaStringColorPicker = (\n  props: Partial<ColorPickerBaseProps<string>>\n): JSX.Element => <AlphaColorPicker {...props} colorModel={colorModel} />;\n","import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HslColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { hslaToHsva, hsvaToHsla, hslaToHsl } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HslColor> = {\n  defaultColor: { h: 0, s: 0, l: 0 },\n  toHsva: ({ h, s, l }) => hslaToHsva({ h, s, l, a: 1 }),\n  fromHsva: (hsva) => hslaToHsl(hsvaToHsla(hsva)),\n  equal: equalColorObjects,\n};\n\nexport const HslColorPicker = (props: Partial<ColorPickerBaseProps<HslColor>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n","import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hslStringToHsva, hsvaToHslString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsl(0, 0%, 0%)\",\n  toHsva: hslStringToHsva,\n  fromHsva: hsvaToHslString,\n  equal: equalColorString,\n};\n\nexport const HslStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n","import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HsvaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { roundHsva } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HsvaColor> = {\n  defaultColor: { h: 0, s: 0, v: 0, a: 1 },\n  toHsva: (hsva) => hsva,\n  fromHsva: roundHsva,\n  equal: equalColorObjects,\n};\n\nexport const HsvaColorPicker = (props: Partial<ColorPickerBaseProps<HsvaColor>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n","import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hsvaStringToHsva, hsvaToHsvaString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsva(0, 0%, 0%, 1)\",\n  toHsva: hsvaStringToHsva,\n  fromHsva: hsvaToHsvaString,\n  equal: equalColorString,\n};\n\nexport const HsvaStringColorPicker = (\n  props: Partial<ColorPickerBaseProps<string>>\n): JSX.Element => <AlphaColorPicker {...props} colorModel={colorModel} />;\n","import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, HsvColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { hsvaToHsv } from \"../utils/convert\";\n\nconst colorModel: ColorModel<HsvColor> = {\n  defaultColor: { h: 0, s: 0, v: 0 },\n  toHsva: ({ h, s, v }) => ({ h, s, v, a: 1 }),\n  fromHsva: hsvaToHsv,\n  equal: equalColorObjects,\n};\n\nexport const HsvColorPicker = (props: Partial<ColorPickerBaseProps<HsvColor>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n","import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { hsvStringToHsva, hsvaToHsvString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"hsv(0, 0%, 0%)\",\n  toHsva: hsvStringToHsva,\n  fromHsva: hsvaToHsvString,\n  equal: equalColorString,\n};\n\nexport const HsvStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n","import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, RgbaColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { rgbaToHsva, hsvaToRgba } from \"../utils/convert\";\n\nconst colorModel: ColorModel<RgbaColor> = {\n  defaultColor: { r: 0, g: 0, b: 0, a: 1 },\n  toHsva: rgbaToHsva,\n  fromHsva: hsvaToRgba,\n  equal: equalColorObjects,\n};\n\nexport const RgbaColorPicker = (props: Partial<ColorPickerBaseProps<RgbaColor>>): JSX.Element => (\n  <AlphaColorPicker {...props} colorModel={colorModel} />\n);\n","import React from \"react\";\n\nimport { AlphaColorPicker } from \"./common/AlphaColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { rgbaStringToHsva, hsvaToRgbaString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"rgba(0, 0, 0, 1)\",\n  toHsva: rgbaStringToHsva,\n  fromHsva: hsvaToRgbaString,\n  equal: equalColorString,\n};\n\nexport const RgbaStringColorPicker = (\n  props: Partial<ColorPickerBaseProps<string>>\n): JSX.Element => <AlphaColorPicker {...props} colorModel={colorModel} />;\n","import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps, RgbColor } from \"../types\";\nimport { equalColorObjects } from \"../utils/compare\";\nimport { rgbaToHsva, hsvaToRgba, rgbaToRgb } from \"../utils/convert\";\n\nconst colorModel: ColorModel<RgbColor> = {\n  defaultColor: { r: 0, g: 0, b: 0 },\n  toHsva: ({ r, g, b }) => rgbaToHsva({ r, g, b, a: 1 }),\n  fromHsva: (hsva) => rgbaToRgb(hsvaToRgba(hsva)),\n  equal: equalColorObjects,\n};\n\nexport const RgbColorPicker = (props: Partial<ColorPickerBaseProps<RgbColor>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n","import React from \"react\";\n\nimport { ColorPicker } from \"./common/ColorPicker\";\nimport { ColorModel, ColorPickerBaseProps } from \"../types\";\nimport { equalColorString } from \"../utils/compare\";\nimport { rgbStringToHsva, hsvaToRgbString } from \"../utils/convert\";\n\nconst colorModel: ColorModel<string> = {\n  defaultColor: \"rgb(0, 0, 0)\",\n  toHsva: rgbStringToHsva,\n  fromHsva: hsvaToRgbString,\n  equal: equalColorString,\n};\n\nexport const RgbStringColorPicker = (props: Partial<ColorPickerBaseProps<string>>): JSX.Element => (\n  <ColorPicker {...props} colorModel={colorModel} />\n);\n","const hex3 = /^#?[0-9A-F]{3}$/i;\nconst hex6 = /^#?[0-9A-F]{6}$/i;\n\nexport const validHex = (color: string): boolean => hex6.test(color) || hex3.test(color);\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { useEventCallback } from \"../hooks/useEventCallback\";\nimport { validHex } from \"../utils/validate\";\n\n// Escapes all non-hexadecimal characters including \"#\"\nconst escape = (hex: string) => hex.replace(/([^0-9A-F]+)/gi, \"\").substr(0, 6);\n\ninterface ComponentProps {\n  color: string;\n  onChange: (newColor: string) => void;\n}\n\ntype InputProps = Omit<React.InputHTMLAttributes<HTMLInputElement>, \"onChange\" | \"value\">;\n\nexport const HexColorInput = (props: Partial<InputProps & ComponentProps>): JSX.Element => {\n  const { color = \"\", onChange, onBlur, ...rest } = props;\n  const [value, setValue] = useState(() => escape(color));\n  const onChangeCallback = useEventCallback<string>(onChange);\n  const onBlurCallback = useEventCallback<React.FocusEvent<HTMLInputElement>>(onBlur);\n\n  // Trigger `onChange` handler only if the input value is a valid HEX-color\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const inputValue = escape(e.target.value);\n      setValue(inputValue);\n      if (validHex(inputValue)) onChangeCallback(\"#\" + inputValue);\n    },\n    [onChangeCallback]\n  );\n\n  // Take the color from props if the last typed color (in local state) is not valid\n  const handleBlur = useCallback(\n    (e: React.FocusEvent<HTMLInputElement>) => {\n      if (!validHex(e.target.value)) setValue(escape(color));\n      onBlurCallback(e);\n    },\n    [color, onBlurCallback]\n  );\n\n  // Update the local state when `color` property value is changed\n  useEffect(() => {\n    setValue(escape(color));\n  }, [color]);\n\n  return (\n    <input\n      {...rest}\n      value={value}\n      spellCheck=\"false\" // the element should not be checked for spelling errors\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n"],"names":["useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","useEventCallback","handler","callbackRef","useRef","current","useCallback","value","clamp","number","min","max","isTouch","e","getRelativePosition","node","event","rect","getBoundingClientRect","pointer","touches","left","pageX","pageXOffset","width","top","pageY","pageYOffset","height","Interactive","React","memo","onMove","onKey","rest","container","hasTouched","isDragging","setDragging","useState","onMoveCallback","onKeyCallback","handleMove","preventDefault","handleMoveStart","nativeEvent","isValid","handleKeyDown","keyCode","which","handleMoveEnd","toggleDocumentEvents","state","toggleEvent","addEventListener","removeEventListener","className","ref","onTouchStart","onMouseDown","onKeyDown","tabIndex","role","formatClassName","names","filter","Boolean","join","Pointer","color","nodeClassName","style","backgroundColor","round","digits","base","Math","pow","hexToRgba","hex","substr","length","r","parseInt","g","b","a","hslaStringToHsva","hslString","match","exec","hslaToHsva","h","Number","s","l","undefined","v","hslStringToHsva","hsvaToHsla","hh","hsvaToHslString","hsva","hsvaToHslaString","hsvaToRgba","floor","c","d","module","hsvaStringToHsva","hsvString","roundHsva","hsvStringToHsva","rgbaStringToHsva","rgbaString","rgbaToHsva","rgbStringToHsva","format","toString","delta","Hue","hue","onChange","interaction","offset","aria-label","aria-valuetext","Saturation","containerStyle","equalColorObjects","first","second","prop","equalColorString","replace","useColorManipulation","colorModel","onChangeCallback","updateHsva","toHsva","cache","equal","newHsva","newColor","fromHsva","handleChange","params","Object","assign","ColorPicker","defaultColor","rgbaToHex","toLowerCase","HexColorPicker","props","Alpha","gradientStyle","backgroundImage","AlphaColorPicker","HslaColorPicker","HslaStringColorPicker","hslaToHsl","HslColorPicker","HslStringColorPicker","HsvaColorPicker","HsvaStringColorPicker","HsvColorPicker","HsvStringColorPicker","RgbaColorPicker","RgbaStringColorPicker","rgbaToRgb","RgbColorPicker","RgbStringColorPicker","hex3","hex6","validHex","test","escape","HexColorInput","onBlur","setValue","onBlurCallback","inputValue","target","handleBlur","spellCheck"],"mappings":"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"}